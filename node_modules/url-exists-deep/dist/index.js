"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _got = _interopRequireDefault(require("got"));

var urlExistsDeep = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(uri) {
    var header,
        method,
        timeout,
        pool,
        prevStatus,
        headers,
        options,
        response,
        _response,
        statusCode,
        request,
        url,
        responseHeaders,
        checkUrl,
        newMethod,
        _args = arguments;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            header = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            method = _args.length > 2 && _args[2] !== undefined ? _args[2] : 'HEAD';
            timeout = _args.length > 3 && _args[3] !== undefined ? _args[3] : 5000;
            pool = _args.length > 4 && _args[4] !== undefined ? _args[4] : {};
            prevStatus = _args.length > 5 && _args[5] !== undefined ? _args[5] : 0;
            headers = header;
            options = {
              url: uri,
              method: method,
              headers: headers,
              followRedirect: false,
              timeout: timeout,
              pool: pool,
              throwHttpErrors: false
            };
            _context.prev = 7;
            _context.next = 10;
            return (0, _got["default"])(options);

          case 10:
            response = _context.sent;
            _context.next = 16;
            break;

          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](7);
            return _context.abrupt("return", false);

          case 16:
            _response = response, statusCode = _response.statusCode, request = _response.request;
            url = request.options.url;
            responseHeaders = response.headers;

            if (!(/3\d\d/.test(statusCode) && !responseHeaders.location)) {
              _context.next = 21;
              break;
            }

            return _context.abrupt("return", false);

          case 21:
            if (!(/4\d\d/.test(statusCode) && ![403, 405].includes(statusCode))) {
              _context.next = 23;
              break;
            }

            return _context.abrupt("return", false);

          case 23:
            if (!/5\d\d/.test(statusCode)) {
              _context.next = 25;
              break;
            }

            return _context.abrupt("return", false);

          case 25:
            newMethod = method;

            if (![403, 405].includes(statusCode)) {
              _context.next = 34;
              break;
            }

            if (![403, 405].includes(prevStatus)) {
              _context.next = 29;
              break;
            }

            return _context.abrupt("return", false);

          case 29:
            checkUrl = url.href;
            headers = {
              Accept: headers.Accept || 'text/html',
              'User-Agent': headers['User-Agent'] || 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36'
            };
            newMethod = 'GET';
            _context.next = 35;
            break;

          case 34:
            if (/3\d\d/.test(statusCode) && responseHeaders.location) {
              checkUrl = !response.headers.location.includes('://') ? "".concat(url.protocol, "//").concat(responseHeaders.location) : response.headers.location;
            }

          case 35:
            if (!checkUrl) {
              _context.next = 37;
              break;
            }

            return _context.abrupt("return", urlExistsDeep(checkUrl, headers, newMethod, timeout, pool, statusCode));

          case 37:
            return _context.abrupt("return", response.request.options.url);

          case 38:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[7, 13]]);
  }));

  return function urlExistsDeep(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _default = urlExistsDeep;
exports["default"] = _default;
module.exports = urlExistsDeep;